// src/navigation.js
const { Markup } = require('telegraf');

const ACTION_SHOW_MAIN_MENU = 'nav_show_main_menu';
const ACTION_BACK_TO_MAIN_MENU = 'nav_back_to_main_menu';
const featureStateCleanupCallbacks = [];

function registerFeatureStateCleanup(cleanupFn) {
    featureStateCleanupCallbacks.push(cleanupFn);
}

function cleanupAllFeatureStatesForUser(userId) {
    console.log(`[Navigation] Cleaning up feature states for user ${userId}`);
    featureStateCleanupCallbacks.forEach(fn => {
        try { fn(userId); } catch (e) { console.error(`[Navigation] Error during cleanup:`, e); }
    });
}

async function showMainMenu(ctx, attemptEdit = false) { // attemptEdit —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –º–µ—Å—Ç –≤—ã–∑–æ–≤–∞
    const userId = ctx.from.id;
    cleanupAllFeatureStatesForUser(userId);

    const messageText = 'üëã Welcome to the Main Menu! Please choose an option:';
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìÖ Deadlines', 'menu_deadlines')],
        [Markup.button.callback('üá¨üáß English Improvement', 'english_improvement')],
        [Markup.button.callback('üéØ Flashcards', 'menu_flashcards')],
        [Markup.button.callback('üöÄ Motivation', 'menu_motivation_start')],
    ]);

    // –í–°–ï–ì–î–ê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    // –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if (ctx.updateType === 'callback_query' && ctx.callbackQuery.message && ctx.callbackQuery.message.from.id === ctx.botInfo.id) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–º–µ—Ä—Ç–≤—ã—Ö" –∫–Ω–æ–ø–æ–∫
            // await ctx.editMessageReplyMarkup(null); // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
            // –ò–õ–ò —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        } catch (e) {
            console.warn("Could not delete or remove markup from previous message:", e.message);
        }
    }
    await ctx.reply(messageText, keyboard).catch(e => console.error("Error sending main menu:", e));
}

function getBackToMainMenuButton() {
    return Markup.button.callback('¬´ Back to Main Menu', ACTION_BACK_TO_MAIN_MENU);
}

function setupGlobalNavigationHandlers(bot) {
    bot.action(ACTION_SHOW_MAIN_MENU, async (ctx) => {
        await ctx.answerCbQuery().catch(e => {});
        await showMainMenu(ctx, false); // –í—Å–µ–≥–¥–∞ false –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    });

    bot.action(ACTION_BACK_TO_MAIN_MENU, async (ctx) => {
        await ctx.answerCbQuery().catch(e => {});
        await showMainMenu(ctx, false); // –í—Å–µ–≥–¥–∞ false –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    });

    bot.command('start', async (ctx) => {
        await showMainMenu(ctx, false); // –í—Å–µ–≥–¥–∞ false –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    });

    console.log('[Navigation] Global navigation handlers set up (no edit mode).');
}

module.exports = {
    showMainMenu,
    getBackToMainMenuButton,
    setupGlobalNavigationHandlers,
    registerFeatureStateCleanup,
    ACTION_SHOW_MAIN_MENU,
    ACTION_BACK_TO_MAIN_MENU
};