// src/features/deadlines/deadlines.controller.js
const { Markup } = require('telegraf');
const { getBackToMainMenuButton } = require('../../navigation');

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
const deadlineInternalStates = {
    IDLE: 'dl_idle',
    AWAITING_TITLE: 'dl_awaiting_title',
    AWAITING_DATE: 'dl_awaiting_date',
    CHOOSING_TO_DELETE: 'dl_choosing_to_delete'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è, –≤—ã–Ω–µ—Å–µ–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ cleanup —Ñ—É–Ω–∫—Ü–∏–∏
const userModuleState = new Map(); 

class DeadlinesController {
    constructor(bot) {
        this.bot = bot;
        this.deadlinesStorage = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åID -> –º–∞—Å—Å–∏–≤ –¥–µ–¥–ª–∞–π–Ω–æ–≤)
    }

    getDeadlinesMenuKeyboard() {
        return Markup.inlineKeyboard([
            [Markup.button.callback('‚ûï Add New Deadline', 'dl_action_add')],
            [Markup.button.callback('üìã View All Deadlines', 'dl_action_view_all')],
            [Markup.button.callback('‚ùå Delete Deadline', 'dl_action_delete_select')],
            [getBackToMainMenuButton()] // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        ]);
    }

    async showDeadlinesFeatureMenu(ctx, editText = true) {
        const userId = ctx.from.id;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –µ–≥–æ –º–µ–Ω—é
        userModuleState.set(userId, { state: deadlineInternalStates.IDLE }); 
        const messageText = 'üìÖ Deadlines Management:';
        const keyboard = this.getDeadlinesMenuKeyboard();

        if (editText && ctx.updateType === 'callback_query' && ctx.callbackQuery.message) {
            try {
                await ctx.editMessageText(messageText, keyboard);
                return;
            } catch (e) {
                console.warn("Deadlines: Could not edit message to show feature menu, sending new.", e.message);
                 if (ctx.callbackQuery.message.from.id === ctx.botInfo.id) {
                    await ctx.deleteMessage(ctx.callbackQuery.message.message_id).catch(delErr => {});
                 }
            }
        }
        await ctx.reply(messageText, keyboard);
    }

    setupHandlers() {
        console.log('[DeadlinesController] Setting up handlers...');

        // –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏–∑ navigation.js -> showMainMenu -> –∫–Ω–æ–ø–∫–∞ 'menu_deadlines')
        this.bot.action('menu_deadlines', async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            await this.showDeadlinesFeatureMenu(ctx, true);
        });

        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –¥–µ–¥–ª–∞–π–Ω–æ–≤ ---

        this.bot.action('dl_action_add', async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            const userId = ctx.from.id;
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
            userModuleState.set(userId, { state: deadlineInternalStates.AWAITING_TITLE });
            await ctx.editMessageText(
                'üìù Please enter the title for your new deadline:',
                Markup.inlineKeyboard([
                    [Markup.button.callback('¬´ Cancel', 'dl_action_cancel_input')]
                ])
            );
        });

        this.bot.action('dl_action_cancel_input', async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            await this.showDeadlinesFeatureMenu(ctx, true); // –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ IDLE
        });

        this.bot.action('dl_action_view_all', async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            const userId = ctx.from.id;
            const userDeadlines = this.deadlinesStorage.get(userId) || [];
            let message = 'üìã Your Deadlines:\n\n';

            if (userDeadlines.length === 0) {
                message = 'You have no deadlines yet.';
            } else {
                userDeadlines.forEach((d, index) => {
                    message += `${index + 1}. ${d.title} (Due: ${d.date})\n`;
                });
            }
            await ctx.editMessageText(message, this.getDeadlinesMenuKeyboard());
        });

        this.bot.action('dl_action_delete_select', async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            const userId = ctx.from.id;
            const userDeadlines = this.deadlinesStorage.get(userId) || [];

            if (userDeadlines.length === 0) {
                await ctx.editMessageText('You have no deadlines to delete.', this.getDeadlinesMenuKeyboard());
                return;
            }
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
            userModuleState.set(userId, { state: deadlineInternalStates.CHOOSING_TO_DELETE });
            const deleteButtons = userDeadlines.map((deadline, index) =>
                [Markup.button.callback(`${index + 1}. ${deadline.title} (${deadline.date})`, `dl_action_delete_confirm_${index}`)]
            );
            deleteButtons.push([Markup.button.callback('¬´ Cancel Deletion', 'dl_action_cancel_input')]);

            await ctx.editMessageText('Select a deadline to delete:', Markup.inlineKeyboard(deleteButtons));
        });

        this.bot.action(/dl_action_delete_confirm_(\d+)/, async (ctx) => {
            await ctx.answerCbQuery().catch(e => {});
            const userId = ctx.from.id;
            const indexToDelete = parseInt(ctx.match[1], 10);
            const userDeadlines = this.deadlinesStorage.get(userId) || [];

            if (indexToDelete >= 0 && indexToDelete < userDeadlines.length) {
                const deleted = userDeadlines.splice(indexToDelete, 1);
                this.deadlinesStorage.set(userId, userDeadlines);
                await ctx.editMessageText(`‚úÖ Deadline "${deleted[0].title}" deleted successfully.`, this.getDeadlinesMenuKeyboard());
            } else {
                await ctx.editMessageText('‚ùå Invalid selection for deletion.', this.getDeadlinesMenuKeyboard());
            }
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
            userModuleState.set(userId, { state: deadlineInternalStates.IDLE });
        });

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ---
        this.bot.on('text', async (ctx) => {
            const userId = ctx.from.id;
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
            const moduleStateData = userModuleState.get(userId);

            if (!moduleStateData || !moduleStateData.state || moduleStateData.state === deadlineInternalStates.IDLE) {
                 // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
                 // –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –∑–¥–µ—Å—å.
                return;
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
            try { await ctx.deleteMessage(ctx.message.message_id); } catch (e) { /* –±—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –±—ã—Å—Ç—Ä–æ */ }

            switch (moduleStateData.state) {
                case deadlineInternalStates.AWAITING_TITLE:
                    const title = ctx.message.text.trim();
                    if (!title) {
                        // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.
                        await ctx.reply("Title cannot be empty. Please try again or cancel.", Markup.inlineKeyboard([[Markup.button.callback('¬´ Cancel', 'dl_action_cancel_input')]])).catch(e => {});
                        return;
                    }
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
                    userModuleState.set(userId, { state: deadlineInternalStates.AWAITING_DATE, title: title });
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ "Please enter title...") –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
                    // –≠—Ç–æ —Å–ª–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç ctx.callbackQuery.message.
                    // –ü—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏.
                    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫) –±—ã–ª–æ –æ—Ç –±–æ—Ç–∞.
                    // –ï—Å–ª–∏ –º—ã —Ö—Ä–∞–Ω–∏–º message_id —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
                    // –ü–æ–∫–∞ —á—Ç–æ —É–ø—Ä–æ—Å—Ç–∏–º:
                    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é.
                    // –ù–æ —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
                    // –õ—É—á—à–µ, –µ—Å–ª–∏ AWAITING_TITLE –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ action, –∏ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ctx.editMessageText
                    // –Ω–∞ ctx.callbackQuery.message.message_id.
                    // –¢–∞–∫ –∫–∞–∫ –º—ã —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –∏–∑ on('text'), ctx.callbackQuery –Ω–µ –±—É–¥–µ—Ç.
                    // –ü–æ—ç—Ç–æ–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    await ctx.reply(
                        `Title set: "${title}".\nüóìÔ∏è Now enter the date (YYYY-MM-DD):`,
                        Markup.inlineKeyboard([[Markup.button.callback('¬´ Cancel', 'dl_action_cancel_input')]])
                    );
                    break;

                case deadlineInternalStates.AWAITING_DATE:
                    const dateStr = ctx.message.text.trim();
                    const currentTitle = moduleStateData.title;

                    if (!/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
                        await ctx.reply(
                            `‚ùå Invalid date format: "${dateStr}".\nPlease use YYYY-MM-DD or cancel:`,
                            Markup.inlineKeyboard([[Markup.button.callback('¬´ Cancel', 'dl_action_cancel_input')]])
                        );
                        return;
                    }

                    const userDeadlines = this.deadlinesStorage.get(userId) || [];
                    userDeadlines.push({ id: String(Date.now()), title: currentTitle, date: dateStr });
                    this.deadlinesStorage.set(userId, userDeadlines);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –¥–µ–¥–ª–∞–π–Ω–æ–≤
                    await ctx.reply(
                        `‚úÖ Deadline "${currentTitle}" for ${dateStr} added!`
                    );
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: this.userModuleState -> userModuleState
                    userModuleState.set(userId, { state: deadlineInternalStates.IDLE });
                    await this.showDeadlinesFeatureMenu(ctx, false); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ–∏—á–∏ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    break;
            }
        });
        console.log('[DeadlinesController] Handlers set up.');
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥—É–ª–µ Deadlines.
 * @param {number} userId 
 */
function cleanupDeadlinesState(userId) {
    if (userModuleState.has(userId)) {
        console.log(`[DeadlinesCleanup] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        userModuleState.delete(userId);
    }
}

function register(bot) {
    const controller = new DeadlinesController(bot);
    if (controller.setupHandlers) {
        controller.setupHandlers();
    } else {
        console.error("DeadlinesController.setupHandlers is not defined!");
    }
    console.log('Deadlines feature registered successfully.');
}

module.exports = { register, cleanupDeadlinesState };